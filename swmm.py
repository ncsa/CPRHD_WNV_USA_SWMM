from pyswmm import Simulation  # Used to convert .inp files to .out and .rpt files using SWMM
import glob  # Used to find .inp and .out file(s)
import pandas as pd
from swmmtoolbox import swmmtoolbox
import os  # Used to delete the .out file after it has been read into a .csv (save disk space) and get thread identity
from multiprocessing import Pool  # Used for multi-threading
import time  # Used for time analysis
import sys  # Used for suppressing output


def process_input(input_file):
    #  Preconditions: 'file' has been passed, containing the directory path for a .inp file
    #  Postconditions: The SWMM model has created a .out and .rpt file in the base_directory\data folder based on the parameters given in the .inp file.
    print(input_file)
    sim = Simulation(input_file)
    sim.execute()
    # Simulation(input_file).execute()



def process_output(output_file, daily=True):
    # Preconditions: A binary .out file generated by SWMM has been passed
    # Postconditions: A .csv file containing data from all variables in variableList has been created in ./data/binary_csv

    variableList = ['Rainfall', 'Evaporation_infiltration', 'Runoff', 'Total_lateral_inflow', 'Flow_leaving_outfalls', 'Evaporation_rate', 'Potential_PET']  # Which catalog variables we want to extract

    input_parameter_list = []  # The extract function needs to have parameters in (system, variable, variable) form.
    for variable in variableList:  # Make a parameter list
        input_parameter_list.append('system,' + variable + ',' + variable)

    frame = swmmtoolbox.extract(output_file, *input_parameter_list)  # Extract all parameters

    filename = './data/binary_csv' + output_file[6:-4] + '.csv'  # Set the .csv file name

    if daily:
        frame = frame.resample('d').sum()  # Group by day ('d') and sum.
        frame.columns = ['rainfall', 'evaporation_infiltration', 'runoff', 'total_lateral_inflow', 'flow_leaving_outfalls', 'evaporation_rate', 'potential_PET']
        with open(filename, 'w') as file:
            pd.DataFrame.to_csv(frame, file)  # Write to .csv file
    else:
        with open(filename, 'w') as file:
            pd.DataFrame.to_csv(frame, file)  # Write the entire data-frame to a .csv file


def complete_process(input_file):
    #  Preconditions: An input file has been passed
    #  Postconditions: A .rpt file has been generated. A .csv file has been created containing data from the simulation.
    print('Processing', input_file[7:], ' Thread:', os.getpid())  # Print filename and thread number
    process_input(input_file)

    output_file = input_file[:-4] + '.out'  # Filename formatting
    process_output(output_file)  # Create the .csv from the .out file
    # os.remove(output_file)  # Remove the .out file


# def suppressOutput(func):  # This function redirects stdout to a null variable so it doesn't get printed
#     def wrapper(*args, **kwargs):
#         with open(os.devnull, 'w') as devNull:
#             original = sys.stdout
#             sys.stdout = devNull
#             func(*args, **kwargs)
#             sys.stdout = original
#     return wrapper


if __name__ == '__main__':
    # no_gi = glob.glob('./data/input_files/no_green_infrastructure/*.inp')
    # rain_barrel = glob.glob('./data/input_files/rain_barrel/*.inp')
    # rain_garden = glob.glob('./data/input_files/rain_garden/*.inp')
    # no_gi.extend(rain_barrel)
    # no_gi.extend(rain_garden)

    california_sensitivity = glob.glob('../plots/california/sensitivity_analysis/*.inp')
    chicago_sensitivity = glob.glob('../plots/chicago/sensitivity_analysis/*.inp')

    print(chicago_sensitivity)
    print(california_sensitivity)


    #Multi Thread
    # pool = Pool()
    # pool.map(process_input, no_gi)

    # Single Thread
    for file in chicago_sensitivity:
        process_input(file)

    for file in california_sensitivity:
        process_input(file)